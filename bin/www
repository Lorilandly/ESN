#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('18652-fse-f23-group-project-sb-2:server');
const http = require('http');
const config = require('config');
const Sequelize = require('sequelize');
// const createDBPool = require('../db').createDBPool;

/**
 * Get port from environment and store in Express.
 */

let serverPort = normalizePort(config.get('server.port'));
app.set('port', serverPort);

/**
 * Get database configs and connect to database.
 */
let dbHost = config.get('db.host');
let dbPort = normalizePort(config.get('db.port'));
let dbName = config.get('db.name');
// let dbPool = createDBPool(dbHost, dbPort, dbName);
let dbClient = config.get('db.client');

// USING SQL
// const setDB = require('../models/user').setDB;
// const initializeUsersTable = require('../models/user').initializeUsersTable;
// const User = require('../models/user').User;

// setDB(dbPool);
// initializeUsersTable();


// USING ORM
const ConnectPostgres = require('../db').connectToPostgres;
const postgresClient = ConnectPostgres(dbName, dbHost, dbPort);
dbClient = postgresClient;


/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(serverPort);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
